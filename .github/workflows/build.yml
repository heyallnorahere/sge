name: build
on: [ push ]
jobs:
  build:
    runs-on: ${{ matrix.os-name }}
    strategy:
      matrix:
        os-name: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.x
      - name: setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: install dependencies (ubuntu)
        if: ${{ matrix.os-name == 'ubuntu-latest' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y mesa-common-dev libxrandr-dev libxinerama-dev \
            libxcursor-dev libxi-dev cmake
      - name: install dependencies (macos)
        if: ${{ matrix.os-name == 'macos-latest' }}
        shell: bash
        run: |
          brew install cmake
      - name: install reference assemblies
        if: ${{ matrix.os-name == 'windows-latest' }}
        shell: powershell
        run: |
          # https://github.com/actions/virtual-environments/issues/5055
          Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
          $componentsToAdd = @(
            "Microsoft.Net.Component.4.7.2.SDK"
          )

          [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
          $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')

          $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
          if ($process.ExitCode -eq 0)
          {
              Write-Host "successfully installed reference assemblies"
          }
          else
          {
              Write-Host "failed to install reference assemblies"
              exit 1
          }
      - name: build
        shell: bash
        run: |
          cmake --preset default -DCMAKE_BUILD_TYPE=Release
          cmake --build --preset default